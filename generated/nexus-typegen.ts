/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../lib/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: Date
}

export interface NexusGenObjects {
  Mutation: {};
  Project: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    id?: string | null; // String
    isPublished?: string | null; // String
    title?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Query: {};
  User: { // root type
    id?: string | null; // String
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    addProject: NexusGenRootTypes['Project'] | null; // Project
    addUser: NexusGenRootTypes['User'] | null; // User
    changeIsPublish: NexusGenRootTypes['Project']; // Project!
    deletUserById: NexusGenRootTypes['User'] | null; // User
    deleteProjectById: NexusGenRootTypes['Project']; // Project!
    updateProjectById: NexusGenRootTypes['Project'] | null; // Project
    updateUserById: NexusGenRootTypes['User'] | null; // User
  }
  Project: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    id: string | null; // String
    isPublished: string | null; // String
    title: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    user: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    allUsers: NexusGenRootTypes['User'][]; // [User!]!
    getAllProjects: NexusGenRootTypes['Project'][]; // [Project!]!
    getAllProjectsByUserId: NexusGenRootTypes['Project'][]; // [Project!]!
    getProjectsById: NexusGenRootTypes['Project']; // Project!
  }
  User: { // field return type
    id: string | null; // String
    name: string | null; // String
    projects: Array<NexusGenRootTypes['Project'] | null> | null; // [Project]
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    addProject: 'Project'
    addUser: 'User'
    changeIsPublish: 'Project'
    deletUserById: 'User'
    deleteProjectById: 'Project'
    updateProjectById: 'Project'
    updateUserById: 'User'
  }
  Project: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    id: 'String'
    isPublished: 'String'
    title: 'String'
    updatedAt: 'DateTime'
    user: 'User'
  }
  Query: { // field return type name
    allUsers: 'User'
    getAllProjects: 'Project'
    getAllProjectsByUserId: 'Project'
    getProjectsById: 'Project'
  }
  User: { // field return type name
    id: 'String'
    name: 'String'
    projects: 'Project'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addProject: { // args
      demoUrl: string; // String!
      description: string; // String!
      imageUrl: string; // String!
      repoUrl: string; // String!
      title: string; // String!
      userId: string; // String!
    }
    addUser: { // args
      name: string; // String!
    }
    changeIsPublish: { // args
      isPublished?: boolean | null; // Boolean
      projectId: string; // String!
    }
    deletUserById: { // args
      userId: string; // String!
    }
    deleteProjectById: { // args
      projectId: string; // String!
    }
    updateProjectById: { // args
      demoUrl?: string | null; // String
      description?: string | null; // String
      imageUrl?: string | null; // String
      projectId: string; // String!
      repoUrl?: string | null; // String
      title?: string | null; // String
    }
    updateUserById: { // args
      name?: string | null; // String
      userId: string; // String!
    }
  }
  Query: {
    getAllProjectsByUserId: { // args
      userId: string; // String!
    }
    getProjectsById: { // args
      projectId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}